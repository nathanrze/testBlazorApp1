@page "/Libros"

<h2 class="text-center my-4">📖 Editor de Libro</h2>

<div class="container">
    <!-- Lista desplegable para elegir un nombre -->
    <div class="mb-3">
        <label for="userName">Elija su nombre:</label>
        <select id="userName" @bind="nombreUsuarioSeleccionado" class="form-control">
            <option value="">Seleccione un nombre</option>
            @foreach (var nombre in remitentesUnicos)
            {
                <option value="@nombre">@nombre</option>
            }
        </select>
    </div>

    <!-- Selección de archivo -->
    <div class="mb-3">
        <InputFile OnChange="ManejarArchivoSeleccionado" class="form-control" />
    </div>
    <p class="text-muted">📂 Archivo seleccionado: <strong>@nombreArchivo</strong></p>

    @if (mensajes.Any())
    {
        <div class="chat-container">
            @foreach (var mensaje in mensajes)
            {
                <div class="message-wrapper @(mensaje.Remitente == nombreUsuarioSeleccionado ? "sent" : "received")">
                    <div class="message-bubble">
                        <div class="message-header">
                            <strong>@mensaje.Remitente</strong> <small>@mensaje.Hora</small>
                        </div>
                        <div class="message-content">
                            @if (mensaje.EnEdicion)
                            {
                                <input @bind="mensaje.ContenidoTemporal" class="form-control input-message" />
                            }
                            else
                            {
                                <span>@mensaje.Contenido</span>
                            }
                        </div>
                    </div>

                    <div class="message-actions text-center">
                        @if (mensaje.EnEdicion)
                        {
                            <button @onclick="() => GuardarEdicion(mensaje)" class="btn btn-success btn-sm">💾 Guardar</button>
                            <button @onclick="() => CancelarEdicion(mensaje)" class="btn btn-warning btn-sm">↩️ Cancelar</button>
                        }
                        else
                        {
                            <button @onclick="() => EditarMensaje(mensaje)" class="btn btn-primary btn-sm">📝 Editar</button>
                            <button @onclick="() => EliminarMensaje(mensaje)" class="btn btn-danger btn-sm">❌ Eliminar</button>
                        }
                    </div>
                </div>
            }
        </div>
    }
</div>

<style>
    /* Estilos sin cambios */
    .chat-container {
        max-width: 800px;
        margin: 0 auto;
        padding: 20px;
    }

    .message-wrapper {
        display: flex;
        flex-direction: column;
        margin-bottom: 15px;
        max-width: 70%;
    }

        .message-wrapper.sent {
            align-items: flex-end;
            margin-left: auto;
        }

        .message-wrapper.received {
            align-items: flex-start;
            margin-right: auto;
        }

    .message-bubble {
        position: relative;
        padding: 10px 15px;
        border-radius: 10px;
        word-wrap: break-word;
        max-width: 100%;
    }

    .message-wrapper.sent .message-bubble {
        background-color: #DCF8C6; /* Verde claro como WhatsApp para mensajes enviados */
    }

    .message-wrapper.received .message-bubble {
        background-color: #FFFFFF; /* Blanco para mensajes recibidos */
        border: 1px solid #E0E0E0;
    }

    /* Efecto de "cola" */
    .message-wrapper.sent .message-bubble::after {
        content: '';
        position: absolute;
        bottom: 0;
        right: -10px;
        width: 10px;
        height: 10px;
        background-color: #DCF8C6;
        clip-path: polygon(0 0, 100% 100%, 0 100%);
    }

    .message-wrapper.received .message-bubble::after {
        content: '';
        position: absolute;
        bottom: 0;
        left: -10px;
        width: 10px;
        height: 10px;
        background-color: #FFFFFF;
        border-bottom: 1px solid #E0E0E0;
        border-left: 1px solid #E0E0E0;
        clip-path: polygon(100% 0, 0 100%, 100% 100%);
    }

    .message-header {
        font-size: 0.9em;
        margin-bottom: 5px;
    }

        .message-header small {
            color: #888;
            margin-left: 10px;
        }
</style>

@code {
    private string nombreArchivo = "";
    private List<Mensaje> mensajes = new();
    private HashSet<string> remitentesUnicos = new(); // Para almacenar los nombres únicos de los remitentes
    private string nombreUsuarioSeleccionado = ""; // Nombre seleccionado por el usuario

    private async Task ManejarArchivoSeleccionado(InputFileChangeEventArgs e)
    {
        var archivo = e.File;
        nombreArchivo = archivo.Name;
        await ExtraerZipAsync(archivo);
    }

    private async Task ExtraerZipAsync(IBrowserFile archivo)
    {
        try
        {
            using var memoryStream = new MemoryStream();
            await archivo.OpenReadStream().CopyToAsync(memoryStream);
            memoryStream.Seek(0, SeekOrigin.Begin);

            using var archive = new System.IO.Compression.ZipArchive(memoryStream, System.IO.Compression.ZipArchiveMode.Read);
            var chatEntry = archive.Entries.FirstOrDefault(e => e.Name == "_chat.txt");

            if (chatEntry != null)
            {
                using var reader = new StreamReader(chatEntry.Open());
                var contenido = await reader.ReadToEndAsync();
                mensajes = contenido
                    .Split('\n')
                    .Where(line => !string.IsNullOrWhiteSpace(line))
                    .Select(ParsearMensaje)
                    .Where(mensaje => mensaje != null)
                    .ToList()!;

                // Extraer los nombres únicos de los remitentes
                remitentesUnicos = new HashSet<string>(mensajes.Select(m => m.Remitente));
            }
            else
            {
                mensajes = new() { new Mensaje { Contenido = "❌ Error: _chat.txt no encontrado en el archivo." } };
            }
        }
        catch (Exception ex)
        {
            mensajes = new() { new Mensaje { Contenido = $"❌ Error al extraer: {ex.Message}" } };
        }
    }

    private Mensaje? ParsearMensaje(string linea)
    {
        try
        {
            var pattern = @"\[(\d{1,2}/\d{1,2}/\d{2}) (\d{1,2}:\d{2}:\d{2})\] (.+?): (.+)";
            var match = System.Text.RegularExpressions.Regex.Match(linea, pattern);

            if (match.Success)
            {
                return new Mensaje
                    {
                        Fecha = match.Groups[1].Value,
                        Hora = match.Groups[2].Value,
                        Remitente = match.Groups[3].Value,
                        Contenido = match.Groups[4].Value,
                        ContenidoTemporal = match.Groups[4].Value
                    };
            }
        }
        catch { }
        return null;
    }

    private void EditarMensaje(Mensaje mensaje)
    {
        mensaje.EnEdicion = true;
        mensaje.ContenidoTemporal = mensaje.Contenido;
    }

    private void GuardarEdicion(Mensaje mensaje)
    {
        mensaje.Contenido = mensaje.ContenidoTemporal;
        mensaje.EnEdicion = false;
    }

    private void CancelarEdicion(Mensaje mensaje)
    {
        mensaje.ContenidoTemporal = mensaje.Contenido;
        mensaje.EnEdicion = false;
    }

    private void EliminarMensaje(Mensaje mensaje)
    {
        mensajes.Remove(mensaje);
    }

    private class Mensaje
    {
        public string Fecha { get; set; } = "";
        public string Hora { get; set; } = "";
        public string Remitente { get; set; } = "";
        public string Contenido { get; set; } = "";
        public string ContenidoTemporal { get; set; } = "";
        public bool EnEdicion { get; set; } = false;
    }
}